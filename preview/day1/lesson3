function Person() {
	// 目的：为了告诉大家，除了 this.属性 = 值 这种形式以外的代码
	// 也会执行！
    // var a = 123;
    // console.log(a);

    this.name = "jack";
    this.age = 18;
}

// 默认情况下，Person 就有一个 prototype 属性，这个属性就是原型！
console.log(Person.prototype);

var p = new Person(); // 此处的小括号是可以省略的
// console.log(p.name);

// 对象 与 原型对象之间的关系：
// 通过对象的 __proto__ 这个属性，可以访问到对象的原型对象
console.log(p.__proto__ === Person.prototype);

// p.__proto__ 与 Person.prototype 的区别：
// 唯一的区别就是：从不同的角度来访问 原型对象
// __proto__ 是站在 实例对象的角度 来访问：原型对象
// prototype 是站在 构造函数的角度 来访问：原型对象
// 
// 其实，就是通过不同形式访问到了同一个对象而已，
// 或者可以认为 __proto__ 和 prototype 引用了同一个对象！

// 注意： __proto__ 是一个非标准的属性，也就是不能用在实际的项目中！
// 这个__proto__ 的作用： 主要是在调试或者开发阶段，方便我们查看对象与原型对象
// 之间的关系

var obj = {};
var ob1 = obj;
